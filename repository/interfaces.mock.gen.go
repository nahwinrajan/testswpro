// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaces.go
//
// Generated by this command:
//
//	mockgen -source=repository/interfaces.go -destination=repository/interfaces.mock.gen.go -package=repository
//

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// DeleteTree mocks base method.
func (m *MockRepositoryInterface) DeleteTree(ctx context.Context, treeID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTree", ctx, treeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTree indicates an expected call of DeleteTree.
func (mr *MockRepositoryInterfaceMockRecorder) DeleteTree(ctx, treeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTree", reflect.TypeOf((*MockRepositoryInterface)(nil).DeleteTree), ctx, treeID)
}

// GetAllTreesInEstate mocks base method.
func (m *MockRepositoryInterface) GetAllTreesInEstate(ctx context.Context, estateID string) ([]Tree, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTreesInEstate", ctx, estateID)
	ret0, _ := ret[0].([]Tree)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTreesInEstate indicates an expected call of GetAllTreesInEstate.
func (mr *MockRepositoryInterfaceMockRecorder) GetAllTreesInEstate(ctx, estateID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTreesInEstate", reflect.TypeOf((*MockRepositoryInterface)(nil).GetAllTreesInEstate), ctx, estateID)
}

// GetEstateByID mocks base method.
func (m *MockRepositoryInterface) GetEstateByID(ctx context.Context, estateID string) (Estate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEstateByID", ctx, estateID)
	ret0, _ := ret[0].(Estate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEstateByID indicates an expected call of GetEstateByID.
func (mr *MockRepositoryInterfaceMockRecorder) GetEstateByID(ctx, estateID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEstateByID", reflect.TypeOf((*MockRepositoryInterface)(nil).GetEstateByID), ctx, estateID)
}

// InsertEstate mocks base method.
func (m *MockRepositoryInterface) InsertEstate(ctx context.Context, width, length int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertEstate", ctx, width, length)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertEstate indicates an expected call of InsertEstate.
func (mr *MockRepositoryInterfaceMockRecorder) InsertEstate(ctx, width, length any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertEstate", reflect.TypeOf((*MockRepositoryInterface)(nil).InsertEstate), ctx, width, length)
}

// InsertTree mocks base method.
func (m *MockRepositoryInterface) InsertTree(ctx context.Context, estateID string, x, y, height int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertTree", ctx, estateID, x, y, height)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertTree indicates an expected call of InsertTree.
func (mr *MockRepositoryInterfaceMockRecorder) InsertTree(ctx, estateID, x, y, height any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertTree", reflect.TypeOf((*MockRepositoryInterface)(nil).InsertTree), ctx, estateID, x, y, height)
}

// UpdateEstate mocks base method.
func (m *MockRepositoryInterface) UpdateEstate(ctx context.Context, count, min, max, median, patrol_distance int, patrol_route string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEstate", ctx, count, min, max, median, patrol_distance, patrol_route)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEstate indicates an expected call of UpdateEstate.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateEstate(ctx, count, min, max, median, patrol_distance, patrol_route any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEstate", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateEstate), ctx, count, min, max, median, patrol_distance, patrol_route)
}
